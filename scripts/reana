#!/bin/bash
#
# This file is part of REANA.
# Copyright (C) 2017 CERN.
#
# REANA is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# REANA is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# REANA; if not, write to the Free Software Foundation, Inc., 59 Temple Place,
# Suite 330, Boston, MA 02111-1307, USA.
#
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as an Intergovernmental Organization or
# submit itself to any jurisdiction.

version="v0.0.1"

reana_components="reana-server
reana-job-controller
reana-workflow-controller
reana-workflow-monitor
reana-message-broker
reana-workflow-engine-yadage"

experiment_list="alice
lhcb
atlas
cms
default"

install_initialize_minikube () {
    # Check whether the OS is supported
    if ! echo "darwin linux" | grep -F -q -w -i "$(uname -s)"
    then
        echo 'Your OS is not supported.'
        exit 1
    else
        OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
    fi

    # Install tools `kubectl` and `minikube` if necessary
    if ! command -v kubectl > /dev/null 2>&1
    then
        echo 'Installing latest kubectl ...'
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/$OS/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
    fi

    if ! command -v minikube > /dev/null 2>&1
    then
        echo 'Installing minikube ...'
        curl -Lo minikube "https://storage.googleapis.com/minikube/releases/v0.17.1/minikube-$OS-amd64"
        chmod +x minikube
        sudo mv minikube /usr/local/bin/
    fi
    # Start `minikube`
    minikube start || echo 'Error while starting minikube' && exit 1

    # Use minikube Docker daemon, so local images will be used instead
    # of pulling from registry
    echo 'Using minikube Docker daemon ...'
    eval "$(minikube docker-env)"
}

pull () {
    # Pull all REANA components images and retag for local `dev`
    echo 'Pulling REANA components images ...'
    for component in $reana_components
    do
	      versioned_component="$component:$version"
        docker pull "reanahub/$versioned_component"
        docker tag "reanahub/$versioned_component" "$versioned_component"
    done
}

prepare () {
    # FIXME: `extras_require` does not support not PyPI deps
    # and `dependency_links` does not to work. Remove when
    # `pip install reana[backend]` available.
    pip install -e 'git+https://github.com/reanahub/reana-resources-k8s.git@master#egg=reana-resources-k8s'
    # Generate Kubernetes manifests
    echo 'Building REANA configuration manifests ...'
    reana-resources-k8s build-manifests $version
    # Set current cluster secret for `reana-job-controller` component
    current_cluster_secret=$(kubectl get secrets | grep 'service-account-token' | cut -d ' ' -f 1)
    sed -i'' -e "s/default-token-8p260/$current_cluster_secret/" configuration-manifests/deployments/job-controller.yaml
}

deploy () {
    # Deploy system
    echo 'Deploying REANA  ...'
    kubectl create -Rf configuration-manifests
}

init () {
    # FIXME more logic should be added in order to avoid pulling images locally
    # when deployment is not local.
    # e.g. if `production` desired, `pull` should be skipped and
    # reana-resources-k8s templates/config.yaml should be updated accordingly.
    pull
    prepare
    deploy
}

down () {
    kubectl delete -Rf configuration-manifests
}

helloworld () {

    # Get URL of reana-workflow-controller
    controller_url=$(reana get reana-workflow-monitor)

    # Submit a -workflow job to workflow-controller
    workflow_id=$(curl --fail --silent \
                    -H "Content-Type: application/json" \
                    -X POST -d \
                    "{\"toplevel\":\"github:reanahub/reana-demo-helloworld\",
                      \"workflow\": \"helloworld.yaml\",
                      \"nparallel\": \"10\",
                      \"preset_pars\": {\"name\": \"John Doe\", \"delay\": \"2\"}
                    }" \
                    http://"$(reana get reana-workflow-controller)/api/yadage?organization=$experiment&user=00000000-0000-0000-0000-000000000000"
                    | grep -oE '"workflow_id"\:[[:space:]]*\"[^\"]*\"'| cut -d ":" -f 2 | tr -d \"[[:space:]]\")

#                    | grep -oP '(?<="workflow_id": ")[^"]*')

#    status_code=$(curl --write-out %{http_code} --fail --silent \
#                    -H "Content-Type: application/json" \
#                    -X POST -d \
#                    "{\"experiment\":\"$experiment\",
#                      \"toplevel\":\"github:reanahub/reana-demo-helloworld\",
#                      \"workflow\": \"helloworld.yaml\",
#                      \"nparallel\": \"10\",
#                      \"preset_pars\": {\"name\": \"John Doe\", \"delay\": \"2\"}
#                    }" \
#                    http://"$(reana get reana-workflow-controller)/api/yadage?organization=default&user=00000000-0000-0000-0000-000000000000"
    # Check for successful execution of curl
    # https://unix.stackexchange.com/a/204790
    # Note that checking with '$?' might fail on some corner cases
    # AND especially when authentication is involved (response codes 401 and 407)
    submit_status=$?

    if [ "$submit_status" = "0" ]; then

        if [ "$flag_verbose" != "" ]; then
            echo "[INFO] Open http://$controller_url/$workflow_id to see visual representation of your workflow and it's progress."
            echo "[INFO] You can 'cat' or 'tail' /reana/$experiment/00000000-0000-0000-0000-000000000000/analyses/$workflow_id/workspace/yadage/helloworld/greetings.txt -file"
            echo "       from shared storage of REANA cluster to see how helloworld workflow progresses."
            echo "[INFO] (e.g. minikube ssh \"tail -c+1 -F /reana/$experiment/00000000-0000-0000-0000-000000000000/analyses/$workflow_id/workspace/yadage/helloworld/greetings.txt\")"
        fi

        echo ""
        echo "Workflow_id: $workflow_id"
        echo "Monitor: http://$controller_url/$workflow_id"
        echo "Output: /reana/$experiment/00000000-0000-0000-0000-000000000000/analyses/$workflow_id/workspace/yadage/helloworld/greetings.txt"
        echo ""

        if [ "$flag_devel" != "" ]; then
            # Start tailing of job-controller logs
            #kubectl logs -f $(kubectl get pods | grep -Po 'job-controller[^ ]+')

            # Start tailing of yadage-atlas-worker logs
            #kubectl logs -f $(kubectl get pods | grep -Po 'yadage-atlas-worker[^ ]+')

            # Open workflow-monitor web-interface
            # Inspired by http://stackoverflow.com/a/27776822
            os_type=$(uname -s)
            if [ "$os_type" = "Darwin" ]; then
                open "http://$controller_url/$workflow_id"
            elif [ "$os_type" = "Linux" ] ; then
                xdg-open "http://$controller_url/$workflow_id"
            fi

            # Tail output-file of the workflow
            echo "[INFO] Tailing outputfile...hit Ctrl+C when done."
            echo ""
            minikube ssh "tail -c+1 -F /reana/$experiment/00000000-0000-0000-0000-000000000000/analyses/$workflow_id/workspace/yadage/helloworld/greetings.txt"
        fi

        retval=0
    else
        retval=1
    fi

    return $retval
}

run () {
    if [ "$3" = "-e" ]; then
        experiment=$4
    else
        experiment=${REANA_EXPERIMENT:-default}
    fi

    # Worflow should be a github repository identifier
    # (e.g. hjhsalo/reana-demo-helloworld)
    # Repository should contain at least REANA specifications file (reana.yaml)
    # in the root of repo.
    workflow=$2

    # The code to check for flags is from http://stackoverflow.com/q/2875424
    # Not sure if this is a good way (POSIX compliant?) or not.
    flag_verbose=$(echo "$@" | grep -oe "--\<verbose\>")
    flag_devel=$(echo "$@" | grep -oe "--\<devel\>")

    # Check for required parameters
    if [ "$workflow" != "" ] && [ "$experiment" != "" ]; then
        #Check that there exists such experiment as inputted by user.
        if echo "$experiment_list" | grep -qE "^$experiment$" ; then

            # FIXME: Should check REANA cluster is accessible?
            # Simple ping/pong, or interaction with kubectl?

            # TODO: get rid of hardcoded helloworld case when run syntax works.
            if [ "$workflow" = "helloworld" ]; then

                helloworld $experiment
                retval=$?

                if [ "$retval" != 0  ]; then
                    echo "[ERROR] Couldn't submit the demo job to workflow-controller."
                    echo "[ERROR] Check that your REANA cluster is deployed and in a state where jobs can be run."
                fi

            else
                # Get REANA specification file (reana.yaml)
                reanaspecfile=$(curl --fail --silent \
                                    -L https://raw.githubusercontent.com/"$workflow"/master/reana.yaml)

                echo $reanaspecfile

                query_status=$?

                if [ "$query_status" = "0" ]; then

                    # FIXME: Use some real YAML parser!
                    # Parse REANA specification file
                    wftype=$(echo "reanaspecfile" | grep -oE 'workflow_type\:[[:space:]]*[^\"]*' | cut -d ":" -f 2 | tr -d \"[[:space:]]\")

                    #TODO: Only take first match if reana.yaml contains identical keys
                    # add '-m 1' to grep command and '| head -1' to pipeline
                    # in order to select just the first matching pattern.
                    # e.g. wfydgfile=$(echo "reanaspec" | grep -oE 'yadage_file\:[[:space:]]*[^\"]*' | head -1 |cut -d ":" -f 2 | tr -d \"[[:space:]]\")

                    wfydgfile=$(echo "$reanaspecfile" | grep -oE 'yadage_file\:[[:space:]]*[^\"]*' | cut -d ":" -f 2 | tr -d [[:space:]])
                    wfydgtoplevel=$(echo "$reanaspecfile" | grep -oE 'yadage_toplevel\:[[:space:]]*[^\"]*' | cut -d ":" -f 2-3 | tr -d [[:space:]])
                    wfydgnparaller=$(echo "$reanaspecfile" | grep -oE 'yadage_nparallel\:[[:space:]]*[^\"]*' | cut -d ":" -f 2 | tr -d [[:space:]])
                    wfydgparams=$(echo "$reanaspecfile" | grep -oE 'yadage_preset_parameters\:[[:space:]].*' | cut -d ":" -f 2- | tr -d [[:space:]])

                    if [ "$flag_verbose" != "" ]; then
                        echo $wfydgfile
                        echo $wfydgtoplevel
                        echo $wfydgnparaller
                        echo $wfydgparams
                    fi

                    # Get URL of reana-workflow-controller
                    controller_url=$(reana get reana-workflow-monitor)

                    # Submit a -workflow job to workflow-controller
    #                    "{\"toplevel\":\"github:reanahub/reana-demo-helloworld\",
    #                      \"workflow\": \"helloworld.yaml\",
    #                      \"nparallel\": \"10\",
    #                      \"preset_pars\": {\"name\": \"John Doe\", \"delay\": \"2\"}
    #                    }"
                    workflow_id=$(curl --fail --silent \
                                    -H "Content-Type: application/json" \
                                    -X POST -d \
                                    "{\"toplevel\":\"$wfydgtoplevel\",
                                      \"workflow\": \"$wfydgfile\",
                                      \"nparallel\": \"$wfydgnparaller\",
                                      \"preset_pars\": $wfydgparams
                                    }" \
                                    http://"$(reana get reana-workflow-controller)/api/yadage?organization=$experiment&user=00000000-0000-0000-0000-000000000000" \
                                    | grep -oE '"workflow_id"\:[[:space:]]*\"[^\"]*\"'| cut -d ":" -f 2 | tr -d \"[[:space:]]\")
    #                echo "[INFO] Support for arbitary workflows is not implemented!"
    #                echo "[INFO] Run 'reana run helloworld -e [experiment] for demo."

                    if [ "$flag_verbose" != "" ]; then
                        echo $workflow_id
                    fi

                    submit_status=$?

                    if [ "$submit_status" = "0" ]; then

                        if [ "$flag_verbose" != "" ]; then
                            echo "[INFO] Open http://$controller_url/$workflow_id to see visual representation of your workflow and it's progress."
                        fi

                        echo ""
                        echo "Workflow_id: $workflow_id"
                        echo "Monitor: http://$controller_url/$workflow_id"
                        echo ""

                        if [ "$flag_devel" != "" ]; then
                            # Start tailing of job-controller logs
                            #kubectl logs -f $(kubectl get pods | grep -Po 'job-controller[^ ]+')

                            # Start tailing of yadage-atlas-worker logs
                            #kubectl logs -f $(kubectl get pods | grep -Po 'yadage-atlas-worker[^ ]+')

                            # Open workflow-monitor web-interface
                            # Inspired by http://stackoverflow.com/a/27776822
                            os_type=$(uname -s)
                            if [ "$os_type" = "Darwin" ]; then
                                open "http://$controller_url/$workflow_id"
                            elif [ "$os_type" = "Linux" ] ; then
                                xdg-open "http://$controller_url/$workflow_id"
                            fi
                        fi

                    else
                        echo "[ERROR] Couldn't submit the workflow job to workflow-controller."
                        echo "[ERROR] Check that your REANA cluster is deployed and in a state where jobs can be run."
                    fi

                else
                    echo "[ERROR] Couldn't find reana.yaml from $workflow repository "
                fi

            fi

        else
            printf "[ERROR] Unknown experiment. Available experiments:\n\n"
            for experiment in $experiment_list
                do
                    printf "\t%s\n" "$experiment"
                done
            echo ""
        fi

    else
        usage
    fi
}

get () {
    component=$1
    if [ "$component" != "" ]
    then
        if echo "$reana_components" | grep -qE "^$component$"
        then
            component_without_namespace=$(printf '%s' "$component" | sed -e "s/reana-//g")
            if minikube ip > /dev/null 2>&1
            then
                ip=$(minikube ip)
            else
                ip=$(kubectl describe pod --selector=app="$component_without_namespace" | grep IP | cut -f 3)
            fi
            port=$(kubectl describe service "$component_without_namespace" | grep 'NodePort:' | cut -f 4 | sed -e "s@/TCP@@")
            echo "$ip":"$port"
        else
            echo 'Unknown component. Check the available components list:'
            echo "$reana_components"
        fi
    else
        usage
    fi
}

usage () {
    echo "${0##*/} manages REANA system operations"
    echo ""
    echo "Usage:"
    echo "  install-minikube       Installs and starts local minikube instance"
    echo "  init                   Initialize REANA system"
    echo "  down                   Delete REANA components"
    echo "  run [workflow] -e [experiment]"
    echo "                         Run specified workflow in namespace of"
    echo "                         of specified experiment."
    echo "  run helloworld -e [experiment]"
    echo "                         Runs a helloworld demo in namespace of"
    echo "                         specified experiment (e.g. '-e atlas')."
    echo "                         Specify experiment with '-e' flag or "
    echo '                         $REANA_EXPERIMENT environment variable.'
    echo "  get [component]        Outputs the component IP address and port"
    echo "  -h                     Help"
}

if [ "$1" != "" ]
then
    case $1 in
        install-minikube)  install_initialize_minikube
                           ;;
        init)              init
                           ;;
        down)              down
                           ;;
        run)               run "$@"
                           ;;
        get)               get "$2"
                           ;;
        -h | --help )      usage
                           exit
                           ;;
    esac
else
    usage
fi
